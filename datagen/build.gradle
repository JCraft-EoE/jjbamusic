plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        datagen {
            inherit client

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":common").file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=jjbamusic"
            vmArg "-Djcraft.datagen.resources-source=${project(":common").file("src/main/resources")}"

            runDir "build/datagen"
        }

        client {
            // Disable client run config
            ideConfigGenerated = false
        }
        server {
            // Disable server run config
            ideConfigGenerated = false
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-data-generation-api-v1:12.3.7+1802ada577"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
